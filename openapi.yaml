openapi: 3.0.0
info:
  title: Flyway API
  description: API for Flyway application
  version: 1.0.0
servers:
  - url: http://localhost:8080/api
    description: Local development server

tags:
  - name: Authentication
    description: User authentication and authorization operations
  - name: Users
    description: User management operations
  - name: Organizations
    description: Organization management operations
  - name: Roles
    description: Role management operations
  - name: Permissions
    description: Permission management operations
  - name: Invitations
    description: Invitation management operations
  - name: Organization Members
    description: Organization member management operations
  - name: Mobile Applications
    description: Mobile application management operations
  - name: Builds
    description: Build management operations
  - name: API Keys
    description: API key management for build uploads

components:
  schemas:
    # Enums - Define all enums first
    UserStatusEnum:
      type: string
      enum: [active, inactive, pending, suspended]
      description: User account status
    
    InvitationStatusEnum:
      type: string
      enum: [pending, accepted, rejected, expired]
      description: Invitation status

    # Request DTOs
    UserRegistrationRequest:
      type: object
      description: Request to register a new user
      required:
        - email
        - password
        - firstName
        - lastName
      properties:
        email:
          type: string
          format: email
          description: User's email address
        password:
          type: string
          format: password
          minLength: 8
          description: User's password (minimum 8 characters)
        firstName:
          type: string
          description: User's first name
        lastName:
          type: string
          description: User's last name

    LoginRequest:
      type: object
      description: Request to login
      required:
        - email
        - password
      properties:
        email:
          type: string
          format: email
          description: User's email address
        password:
          type: string
          format: password
          description: User's password

    RefreshTokenRequest:
      type: object
      description: Request to refresh access token
      required:
        - refreshToken
      properties:
        refreshToken:
          type: string
          description: Refresh token

    CreateOrganizationRequest:
      type: object
      description: Request to create a new organization
      required:
        - name
      properties:
        name:
          type: string
          description: Organization name
        description:
          type: string
          description: Organization description

    UpdateOrganizationRequest:
      type: object
      description: Request to update an organization
      properties:
        name:
          type: string
          description: Organization name
        description:
          type: string
          description: Organization description



    CreateInvitationRequest:
      type: object
      description: Request to create an invitation
      required:
        - firstName
        - lastName
        - email
        - roleId
      properties:
        firstName:
          type: string
          description: First name of the invited user
        lastName:
          type: string
          description: Last name of the invited user
        email:
          type: string
          format: email
          description: Email of the invited user
        roleId:
          type: string
          description: Role ID

    AddOrganizationMemberRequest:
      type: object
      description: Request to add a member to an organization
      required:
        - userId
        - roleId
      properties:
        userId:
          type: string
          description: User ID
        roleId:
          type: string
          description: Role ID

    UpdateMemberRoleRequest:
      type: object
      description: Request to update a member's role
      required:
        - roleId
      properties:
        roleId:
          type: string
          description: New role ID

    CreateMobileApplicationRequest:
      type: object
      description: Request to create a new mobile application
      required:
        - bundleId
        - name
      properties:
        bundleId:
          type: string
          description: Unique bundle identifier for the mobile application (e.g., com.example.app)
        name:
          type: string
          description: Mobile application name
        description:
          type: string
          description: Mobile application description

    UpdateMobileApplicationRequest:
      type: object
      description: Request to update a mobile application
      required:
        - name
      properties:
        name:
          type: string
          description: Mobile application name
        description:
          type: string
          description: Mobile application description

    UpdateUserRequest:
      type: object
      description: Request to update user information
      properties:
        firstName:
          type: string
          description: User's first name
        lastName:
          type: string
          description: User's last name
        email:
          type: string
          format: email
          description: User's email address

    # Response DTOs
    UserResponse:
      type: object
      description: User information
      required:
        - id
        - email
        - firstName
        - lastName
        - status
        - createdAt
      properties:
        id:
          type: string
          description: User ID
        email:
          type: string
          format: email
          description: User's email address
        firstName:
          type: string
          description: User's first name
        lastName:
          type: string
          description: User's last name
        status:
          $ref: '#/components/schemas/UserStatusResponse'
        organization:
          nullable: true
          allOf:
            - $ref: '#/components/schemas/UserOrganizationResponse'
          description: Organization information (null if user is not in an organization)
        role:
          $ref: '#/components/schemas/RoleResponse'
          nullable: true
          description: Role information (null if user is not in an organization)
        invitationStatus:
          $ref: '#/components/schemas/InvitationStatusResponse'
          nullable: true
          description: Invitation status (null for organization owners who were not invited)
        createdAt:
          type: string
          format: date-time
          description: When the user was created
        updatedAt:
          type: string
          format: date-time
          description: When the user was last updated

    UserOrganizationResponse:
      type: object
      description: Minimal organization information for user response
      required:
        - id
        - name
      properties:
        id:
          type: string
          description: Organization ID
        name:
          type: string
          description: Organization name

    UserStatusResponse:
      type: object
      description: User status information
      required:
        - id
        - status
      properties:
        id:
          type: string
          description: Status ID
        status:
          $ref: '#/components/schemas/UserStatusEnum'

    AuthResponse:
      type: object
      description: Authentication response
      required:
        - accessToken
        - refreshToken
        - user
      properties:
        accessToken:
          type: string
          description: JWT access token
        refreshToken:
          type: string
          description: Refresh token
        user:
          $ref: '#/components/schemas/UserResponse'

    OrganizationResponse:
      type: object
      description: Organization information
      required:
        - id
        - name
        - createdAt
      properties:
        id:
          type: string
          description: Organization ID
        name:
          type: string
          description: Organization name
        description:
          type: string
          description: Organization description
        createdAt:
          type: string
          format: date-time
          description: When the organization was created
        updatedAt:
          type: string
          format: date-time
          description: When the organization was last updated

    RoleResponse:
      type: object
      description: Role information (roles are now global across all organizations)
      required:
        - id
        - name
        - permissionsValue
        - createdAt
      properties:
        id:
          type: string
          description: Role ID
        name:
          type: string
          description: Role name
        description:
          type: string
          description: Role description
        permissionsValue:
          type: string
          description: Bitwise permissions value as a string (e.g., "12345")
        createdAt:
          type: string
          format: date-time
          description: When the role was created
        updatedAt:
          type: string
          format: date-time
          description: When the role was last updated

    InvitationResponse:
      type: object
      description: Invitation information
      required:
        - id
        - email
        - organization
        - role
        - status
        - createdAt
      properties:
        id:
          type: string
          description: Invitation ID
        email:
          type: string
          format: email
          description: Email of the invited user
        organization:
          $ref: '#/components/schemas/OrganizationResponse'
        role:
          $ref: '#/components/schemas/RoleResponse'
        status:
          $ref: '#/components/schemas/InvitationStatusResponse'
        invitedBy:
          $ref: '#/components/schemas/UserResponse'
        createdAt:
          type: string
          format: date-time
          description: When the invitation was created
        expiresAt:
          type: string
          format: date-time
          description: When the invitation expires

    InvitationStatusResponse:
      type: object
      description: Invitation status information
      required:
        - id
        - status
      properties:
        id:
          type: string
          description: Status ID
        status:
          $ref: '#/components/schemas/InvitationStatusEnum'

    OrganizationMemberResponse:
      type: object
      description: Organization member information
      required:
        - id
        - user
        - role
        - joinedAt
      properties:
        id:
          type: string
          description: Member ID
        user:
          $ref: '#/components/schemas/UserResponse'
        role:
          $ref: '#/components/schemas/RoleResponse'
        joinedAt:
          type: string
          format: date-time
          description: When the member joined

    PaginatedOrganizationMemberResponse:
      type: object
      description: Paginated organization member response
      required:
        - data
        - total
        - count
        - itemsPerPage
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/OrganizationMemberResponse'
          description: Array of members for this page
        total:
          type: integer
          description: Total number of items across all pages
        count:
          type: integer
          description: Number of items in this page
        itemsPerPage:
          type: integer
          description: Maximum items per page

    MobileApplicationResponse:
      type: object
      description: Mobile application information
      required:
        - id
        - bundleId
        - organizationId
        - name
        - createdBy
        - createdAt
      properties:
        id:
          type: string
          description: Mobile application ID
        bundleId:
          type: string
          description: Bundle identifier for the mobile application
        organizationId:
          type: string
          description: Organization ID that owns this application
        name:
          type: string
          description: Mobile application name
        description:
          type: string
          description: Mobile application description
        createdBy:
          type: string
          description: User ID who created the application
        createdAt:
          type: string
          format: date-time
          description: When the application was created
        updatedAt:
          type: string
          format: date-time
          description: When the application was last updated

    BuildResponse:
      type: object
      description: Build information
      required:
        - id
        - organizationId
        - bundleId
        - commitHash
        - branchName
        - buildSize
        - buildUrl
        - nativeVersion
        - uploadedBy
        - createdAt
      properties:
        id:
          type: string
          description: Unique UUID identifier for the build
        organizationId:
          type: string
          description: Organization ID
        bundleId:
          type: string
          description: Bundle identifier for the mobile application
        commitHash:
          type: string
          description: Git commit hash (unique identifier)
        branchName:
          type: string
          description: Git branch name
        commitMessage:
          type: string
          description: Git commit message
        buildSize:
          type: integer
          format: int64
          description: Build file size in bytes
        buildUrl:
          type: string
          description: URL to download the build file
        nativeVersion:
          type: string
          description: Native app version (e.g., "1.0.0")
        uploadedBy:
          type: string
          description: User ID who uploaded the build
        createdAt:
          type: string
          format: date-time
          description: When the build was uploaded
        updatedAt:
          type: string
          format: date-time
          description: When the build was last updated

    PaginatedBuildResponse:
      type: object
      description: Paginated build response
      required:
        - data
        - page
        - size
        - totalElements
        - totalPages
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/BuildResponse'
          description: Array of builds for this page
        page:
          type: integer
          description: Current page number
        size:
          type: integer
          description: Items per page
        totalElements:
          type: integer
          description: Total number of builds
        totalPages:
          type: integer
          description: Total number of pages

    CreateApiKeyRequest:
      type: object
      description: Request to create an API key
      required:
        - name
        - bundleId
      properties:
        name:
          type: string
          description: Name/description for the API key
        bundleId:
          type: string
          description: Bundle ID of the mobile application

    ApiKeyResponse:
      type: object
      description: API key information
      required:
        - id
        - name
        - keyPrefix
        - bundleId
        - organizationId
        - createdBy
        - createdAt
      properties:
        id:
          type: string
          description: Unique identifier for the API key
        name:
          type: string
          description: Name/description of the API key
        key:
          type: string
          description: The actual API key (only returned on creation)
        keyPrefix:
          type: string
          description: Masked key display (e.g., "flyw...xyz")
        bundleId:
          type: string
          description: Bundle ID this key is for
        organizationId:
          type: string
          description: Organization ID
        createdBy:
          type: string
          description: User ID who created the key
        lastUsedAt:
          type: string
          format: date-time
          description: When the key was last used
        createdAt:
          type: string
          format: date-time
          description: When the key was created
        updatedAt:
          type: string
          format: date-time
          description: When the key was last updated

    PermissionResponse:
      type: object
      description: Permission information
      required:
        - code
        - label
        - description
        - category
        - bitValue
      properties:
        code:
          type: string
          description: Permission code (e.g., "organization.update")
        label:
          type: string
          description: Human-readable permission label
        description:
          type: string
          description: Permission description
        category:
          type: string
          description: Permission category (e.g., "organization", "member", "role")
        bitValue:
          type: string
          description: Bitwise permission value as a string

    ErrorResponse:
      type: object
      description: Error response
      required:
        - error
        - message
      properties:
        error:
          type: string
          description: Error type
        message:
          type: string
          description: Error message
        details:
          type: string
          description: Error details
        timestamp:
          type: string
          format: date-time
          description: When the error occurred

  responses:
    NotFoundError:
      description: Resource not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    
    ValidationError:
      description: Validation error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    
    UnauthorizedError:
      description: Unauthorized access
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    
    ForbiddenError:
      description: Forbidden - insufficient permissions
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    
    ConflictError:
      description: Conflict - resource already exists
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'

  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

paths:
  /auth/register:
    post:
      operationId: register
      summary: Register a new user
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRegistrationRequest'
      responses:
        '201':
          description: User registered successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '400':
          $ref: '#/components/responses/ValidationError'
        '409':
          $ref: '#/components/responses/ConflictError'

  /auth/login:
    post:
      operationId: login
      summary: Login user
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedError'

  /auth/refresh:
    post:
      operationId: refreshToken
      summary: Refresh access token
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RefreshTokenRequest'
      responses:
        '200':
          description: Token refreshed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedError'

  /auth/logout:
    post:
      operationId: logout
      summary: Logout user
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RefreshTokenRequest'
      responses:
        '200':
          description: Logout successful
        '401':
          $ref: '#/components/responses/UnauthorizedError'

  /users/me:
    get:
      operationId: getCurrentUser
      summary: Get current user information
      tags:
        - Users
      security:
        - BearerAuth: []
      responses:
        '200':
          description: User information retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedError'

  /users/{id}:
    get:
      operationId: getUserById
      summary: Get user by ID
      tags:
        - Users
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: User retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/NotFoundError'
    
    put:
      operationId: updateUser
      summary: Update user
      tags:
        - Users
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateUserRequest'
      responses:
        '200':
          description: User updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        '400':
          $ref: '#/components/responses/ValidationError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/NotFoundError'
    
    delete:
      operationId: deleteUser
      summary: Delete user
      tags:
        - Users
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: User deleted successfully
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/NotFoundError'

  /users/{id}/verify-email:
    post:
      operationId: verifyEmail
      summary: Verify user email
      tags:
        - Users
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Email verified successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/NotFoundError'

  /users:
    get:
      operationId: getAllUsers
      summary: Get all users in organization
      tags:
        - Users
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Users retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'

  /organizations:
    get:
      operationId: getCurrentOrganization
      summary: Get current organization
      tags:
        - Organizations
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Organization retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrganizationResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/NotFoundError'
    
    post:
      operationId: createOrganization
      summary: Create a new organization
      tags:
        - Organizations
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateOrganizationRequest'
      responses:
        '201':
          description: Organization created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrganizationResponse'
        '400':
          $ref: '#/components/responses/ValidationError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
    
    put:
      operationId: updateCurrentOrganization
      summary: Update current organization
      tags:
        - Organizations
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateOrganizationRequest'
      responses:
        '200':
          description: Organization updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrganizationResponse'
        '400':
          $ref: '#/components/responses/ValidationError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/NotFoundError'

  /roles:
    get:
      operationId: getRoles
      summary: Get all available roles
      description: Returns all global roles that can be assigned to organization members
      tags:
        - Roles
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Roles retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/RoleResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'

  /permissions:
    get:
      operationId: getPermissions
      summary: Get all available permissions
      description: Returns all permissions that can be assigned to roles
      tags:
        - Permissions
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Permissions retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PermissionResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'

  /invitations:
    post:
      operationId: createInvitation
      summary: Create a new invitation
      description: Create an invitation to add a new member to the organization - requires invitation.create permission
      tags:
        - Invitations
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateInvitationRequest'
      responses:
        '201':
          description: Invitation created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvitationResponse'
        '400':
          $ref: '#/components/responses/ValidationError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '409':
          $ref: '#/components/responses/ConflictError'

  /invitations/token/{token}:
    get:
      operationId: getInvitationByToken
      summary: Get invitation by token (public endpoint)
      description: Public endpoint to retrieve invitation details by token
      tags:
        - Invitations
      parameters:
        - name: token
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Invitation retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvitationResponse'
        '404':
          $ref: '#/components/responses/NotFoundError'

  /invitations/token/{token}/accept:
    post:
      operationId: acceptInvitation
      summary: Accept invitation (public endpoint)
      description: Public endpoint to accept an invitation
      tags:
        - Invitations
      parameters:
        - name: token
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Invitation accepted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvitationResponse'
        '400':
          $ref: '#/components/responses/ValidationError'
        '404':
          $ref: '#/components/responses/NotFoundError'

  /invitations/token/{token}/reject:
    post:
      operationId: rejectInvitation
      summary: Reject invitation (public endpoint)
      description: Public endpoint to reject an invitation
      tags:
        - Invitations
      parameters:
        - name: token
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Invitation rejected successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvitationResponse'
        '400':
          $ref: '#/components/responses/ValidationError'
        '404':
          $ref: '#/components/responses/NotFoundError'

  /invitations/users/{userId}/resend:
    post:
      operationId: resendInvitation
      summary: Resend invitation (private endpoint)
      description: Resend an invitation by user ID - requires invitation.create permission
      tags:
        - Invitations
      security:
        - BearerAuth: []
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Invitation resent successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvitationResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/NotFoundError'

  /members:
    get:
      operationId: getMembers
      summary: Get all members in organization
      tags:
        - Organization Members
      security:
        - BearerAuth: []
      parameters:
        - name: page
          in: query
          description: Page number (0-based)
          required: false
          schema:
            type: integer
            minimum: 0
            default: 0
        - name: limit
          in: query
          description: Number of items per page
          required: false
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
      responses:
        '200':
          description: Members retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedOrganizationMemberResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
    
    post:
      operationId: addMember
      summary: Add a member to organization
      tags:
        - Organization Members
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddOrganizationMemberRequest'
      responses:
        '201':
          description: Member added successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrganizationMemberResponse'
        '400':
          $ref: '#/components/responses/ValidationError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'

  /members/{memberId}:
    get:
      operationId: getMemberById
      summary: Get member by ID
      tags:
        - Organization Members
      security:
        - BearerAuth: []
      parameters:
        - name: memberId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Member retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrganizationMemberResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/NotFoundError'
    
    put:
      operationId: updateMemberRole
      summary: Update member role
      tags:
        - Organization Members
      security:
        - BearerAuth: []
      parameters:
        - name: memberId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateMemberRoleRequest'
      responses:
        '200':
          description: Member role updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrganizationMemberResponse'
        '400':
          $ref: '#/components/responses/ValidationError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/NotFoundError'
    
    delete:
      operationId: removeMember
      summary: Remove member from organization
      tags:
        - Organization Members
      security:
        - BearerAuth: []
      parameters:
        - name: memberId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Member removed successfully
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/NotFoundError'

  /mobile-applications:
    get:
      operationId: getAllMobileApplications
      summary: Get all mobile applications for the organization
      tags:
        - Mobile Applications
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Mobile applications retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/MobileApplicationResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
    
    post:
      operationId: createMobileApplication
      summary: Create a new mobile application
      tags:
        - Mobile Applications
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateMobileApplicationRequest'
      responses:
        '201':
          description: Mobile application created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MobileApplicationResponse'
        '400':
          $ref: '#/components/responses/ValidationError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '409':
          $ref: '#/components/responses/ConflictError'

  /mobile-applications/bundle/{bundleId}:
    get:
      operationId: getMobileApplicationByBundleId
      summary: Get mobile application by bundle ID
      tags:
        - Mobile Applications
      security:
        - BearerAuth: []
      parameters:
        - name: bundleId
          in: path
          required: true
          schema:
            type: string
          description: The bundle ID of the mobile application (e.g., com.example.app)
      responses:
        '200':
          description: Mobile application retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MobileApplicationResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/NotFoundError'

  /mobile-applications/{id}:
    get:
      operationId: getMobileApplicationById
      summary: Get mobile application by ID
      tags:
        - Mobile Applications
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Mobile application retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MobileApplicationResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/NotFoundError'
    
    put:
      operationId: updateMobileApplication
      summary: Update mobile application
      tags:
        - Mobile Applications
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateMobileApplicationRequest'
      responses:
        '200':
          description: Mobile application updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MobileApplicationResponse'
        '400':
          $ref: '#/components/responses/ValidationError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/NotFoundError'
    
    delete:
      operationId: deleteMobileApplication
      summary: Delete mobile application
      tags:
        - Mobile Applications
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Mobile application deleted successfully
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/NotFoundError'

  /{orgId}/{bundleId}/builds:
    get:
      operationId: getBuilds
      summary: Get builds with pagination and sorting
      tags:
        - Builds
      security:
        - BearerAuth: []
      parameters:
        - name: orgId
          in: path
          required: true
          schema:
            type: string
          description: Organization ID
        - name: bundleId
          in: path
          required: true
          schema:
            type: string
          description: Bundle ID of the mobile application
        - name: page
          in: query
          required: false
          schema:
            type: integer
            default: 0
          description: Page number (default 0)
        - name: size
          in: query
          required: false
          schema:
            type: integer
            default: 20
          description: Page size (default 20)
        - name: sort
          in: query
          required: false
          schema:
            type: string
            enum: [asc, desc]
            default: desc
          description: Sort direction by createdAt (default desc)
      responses:
        '200':
          description: Builds retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedBuildResponse'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
    
    post:
      operationId: uploadBuild
      summary: Upload a new build
      deprecated: true
      description: "DEPRECATED: This endpoint has been removed. Use the API key-based upload endpoint at /v1/builds instead."
      tags:
        - Builds
      security:
        - BearerAuth: []
      parameters:
        - name: orgId
          in: path
          required: true
          schema:
            type: string
          description: Organization ID
        - name: bundleId
          in: path
          required: true
          schema:
            type: string
          description: Bundle ID of the mobile application
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              required:
                - commitHash
                - branchName
                - nativeVersion
                - file
              properties:
                commitHash:
                  type: string
                  description: Git commit hash (unique identifier for the build)
                branchName:
                  type: string
                  description: Git branch name
                commitMessage:
                  type: string
                  description: Git commit message
                nativeVersion:
                  type: string
                  description: Native app version (e.g., "1.0.0")
                file:
                  type: string
                  format: binary
                  description: The build file (APK/IPA, max 30MB)
      responses:
        '201':
          description: Build uploaded successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BuildResponse'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '409':
          $ref: '#/components/responses/ConflictError'

  /builds/{buildId}:
    delete:
      operationId: deleteBuild
      summary: Delete a build by its UUID
      tags:
        - Builds
      security:
        - BearerAuth: []
      parameters:
        - name: buildId
          in: path
          required: true
          schema:
            type: string
          description: The UUID of the build to delete
      responses:
        '204':
          description: Build deleted successfully
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/NotFoundError'

  /v1/builds:
    post:
      operationId: uploadBuildWithApiKey
      summary: Upload a new build using API key authentication
      description: "Upload builds using API key authentication. This is the only way to upload builds and is designed for CI/CD pipelines. Requires X-API-Key header instead of JWT token."
      tags:
        - Builds
        - API Keys
      parameters:
        - name: X-API-Key
          in: header
          required: true
          schema:
            type: string
          description: API key for authentication (e.g., "flyway_abc123...")
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              required:
                - commitHash
                - branchName
                - nativeVersion
                - file
              properties:
                commitHash:
                  type: string
                  description: Git commit hash (unique identifier for the build)
                branchName:
                  type: string
                  description: Git branch name
                commitMessage:
                  type: string
                  description: Git commit message
                nativeVersion:
                  type: string
                  description: Native app version (e.g., "1.0.0")
                file:
                  type: string
                  format: binary
                  description: The build file (APK/IPA, max 30MB)
      responses:
        '201':
          description: Build uploaded successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BuildResponse'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '409':
          $ref: '#/components/responses/ConflictError'

  /{orgId}/{bundleId}/api-keys:
    get:
      operationId: getApiKeys
      summary: Get all API keys for a bundle
      tags:
        - API Keys
      security:
        - BearerAuth: []
      parameters:
        - name: orgId
          in: path
          required: true
          schema:
            type: string
          description: Organization ID
        - name: bundleId
          in: path
          required: true
          schema:
            type: string
          description: Bundle ID of the mobile application
      responses:
        '200':
          description: API keys retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ApiKeyResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/NotFoundError'
    
    post:
      operationId: createApiKey
      summary: Create a new API key
      tags:
        - API Keys
      security:
        - BearerAuth: []
      parameters:
        - name: orgId
          in: path
          required: true
          schema:
            type: string
          description: Organization ID
        - name: bundleId
          in: path
          required: true
          schema:
            type: string
          description: Bundle ID of the mobile application
        - name: name
          in: query
          required: true
          schema:
            type: string
          description: Name/description for the API key
      responses:
        '201':
          description: API key created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiKeyResponse'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/NotFoundError'

  /{orgId}/{bundleId}/api-keys/{keyId}:
    delete:
      operationId: deleteApiKey
      summary: Delete an API key
      tags:
        - API Keys
      security:
        - BearerAuth: []
      parameters:
        - name: orgId
          in: path
          required: true
          schema:
            type: string
          description: Organization ID
        - name: bundleId
          in: path
          required: true
          schema:
            type: string
          description: Bundle ID of the mobile application
        - name: keyId
          in: path
          required: true
          schema:
            type: string
          description: API key ID
      responses:
        '204':
          description: API key deleted successfully
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/NotFoundError'

